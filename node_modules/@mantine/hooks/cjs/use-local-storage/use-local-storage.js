'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var useWindowEvent = require('../use-window-event/use-window-event.js');

function serializeJSON(value) {
  try {
    return JSON.stringify(value);
  } catch (error) {
    throw new Error("@mantine/hooks use-local-storage: Failed to serialize the value");
  }
}
function deserializeJSON(value) {
  try {
    return JSON.parse(value);
  } catch (e) {
    return value;
  }
}
function useLocalStorage({
  key,
  defaultValue = void 0,
  deserialize = deserializeJSON,
  serialize = serializeJSON
}) {
  const [value, setValue] = react.useState(typeof window !== "undefined" && "localStorage" in window ? deserialize(window.localStorage.getItem(key)) : defaultValue != null ? defaultValue : "");
  const setLocalStorageValue = react.useCallback((val) => {
    if (val instanceof Function) {
      setValue((current) => {
        const result = val(current);
        window.localStorage.setItem(key, serialize(result));
        return result;
      });
    } else {
      window.localStorage.setItem(key, serialize(val));
      setValue(val);
    }
  }, [key]);
  useWindowEvent.useWindowEvent("storage", (event) => {
    if (event.storageArea === window.localStorage && event.key === key) {
      setValue(deserialize(event.newValue));
    }
  });
  react.useEffect(() => {
    if (defaultValue && !value) {
      setLocalStorageValue(defaultValue);
    }
  }, [defaultValue, value, setLocalStorageValue]);
  return [value || defaultValue, setLocalStorageValue];
}
const useLocalStorageValue = useLocalStorage;

exports.useLocalStorage = useLocalStorage;
exports.useLocalStorageValue = useLocalStorageValue;
//# sourceMappingURL=use-local-storage.js.map
